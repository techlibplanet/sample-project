name : Spring boot CI

on:
  push:
    branches: '**'

jobs:
  #Test's job
  build:
    name: Build app
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v2
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #      #Set up Maven cache
      #      - name: Cache Maven packages
      #        #This action allows caching dependencies and build outputs to improve workflow execution time.
      #        uses: actions/cache@v1
      #        with:
      #          path: ~/.m2
      #          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      #          restore-keys: ${{ runner.os }}-m2
      - name: Run Build
        run: gradle build

  push_api_image:
    name: Push Api image to ghcr.
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=ghcr.io/techlibplanet/sample-project
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_ACCESS_TOKEN }}
      - name: Push to GitHub Packages
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.prep.outputs.tags }}

  terraform:
      needs: push_api_image
      name: terraform CD
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - uses: hashicorp/setup-terraform@v1
          with:
            cli_config_credentials_token: ${{ secrets.TF_ACCESS_TOKEN }}


        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            # terraform_version: 0.13.0
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

        - name: Terraform Init
          id: init
          run: cd infra && terraform init

        - name: Terraform Validate
          id: validate
          run: cd infra && terraform validate -no-color

  #      - name: Get Terraform State
  #        id: tfState
  #        uses: ./infra/terraform.tfstate
  #        with:
  #          organization: wwt-hyd
  #          workspace: quick-restaurant-${{steps.workspace.outputs.TARGET_WORKSPACE}}
  #          terraformApiToken: ${{secrets.TF_ACCESS_TOKEN}}


        - name: Terraform Plan
          id: plan
          #        if: github.event_name == 'pull_request'
          run: cd infra && terraform plan -no-color -out=plan.out && terraform show -json plan.out > plan.out.json
          continue-on-error: true


  #      - name: terraform plan
  #        id: plan
  #        run: |
  #          cd infra && terraform init && terraform plan -out=plan.out && terraform show -json plan.out > plan.out.json

        - name: Terraform Apply
          id: apply
          run: |
            cd infra && terraform apply -auto-approve
  #          cd infra && terraform destroy -auto-approve
  #          cd infra && terraform apply -auto-approve


  #      - name: terraform-compliance
  #        uses: terraform-compliance/github_action@main
  #        with:
  #          plan: plan.out.json
  #          features: ssh://git@github.com/terraform-compliance/user-friendly-features.git


#  push_image:
##    needs: build
#    name: Deploy Image to AWS ECR
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: sample-project-repo
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
